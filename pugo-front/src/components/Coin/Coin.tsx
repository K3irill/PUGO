/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
import React, { useState, useRef, useEffect } from 'react'
import { CoinFrame, CoinStyled, ImgFrame } from './styled'
import { Toaster, toast } from 'react-hot-toast'
export const Coin = () => {
	const [rotation, setRotation] = useState({ x: 0, y: 0 })
	const [scale, setScale] = useState(1)
	const [isInteracting, setIsInteracting] = useState(false)
	const animationRef = useRef<number | null>(null)

	const handleMove = e => {
		const isTouch = 'touches' in e
		const clientX = isTouch ? e.touches[0].clientX : e.clientX
		const clientY = isTouch ? e.touches[0].clientY : e.clientY
		const { left, top, width, height } = e.currentTarget.getBoundingClientRect()

		const x = ((clientX - left) / width - 0.5) * 30
		const y = ((clientY - top) / height - 0.5) * -30

		setRotation({ x: y, y: x })
		setIsInteracting(true)

		if (animationRef.current) {
			cancelAnimationFrame(animationRef.current)
		}
	}

	const handleMouseLeave = () => {
		if (animationRef.current) {
			cancelAnimationFrame(animationRef.current)
		}

		const animateReturn = () => {
			setRotation(prev => {
				const newX = prev.x * 0.9
				const newY = prev.y * 0.9

				if (Math.abs(newX) < 0.5 && Math.abs(newY) < 0.5) {
					return { x: 0, y: 0 }
				}

				animationRef.current = requestAnimationFrame(animateReturn)
				return { x: newX, y: newY }
			})
		}

		animationRef.current = requestAnimationFrame(animateReturn)
		setIsInteracting(false)
	}

	const handleMouseDown = e => {
		const isTouch = 'touches' in e
		const clientX = isTouch ? e.touches[0].clientX : e.clientX
		const clientY = isTouch ? e.touches[0].clientY : e.clientY
		const { left, top, width, height } = e.currentTarget.getBoundingClientRect()

		const x = ((clientX - left) / width - 0.5) * 10
		const y = ((clientY - top) / height - 0.5) * -10

		const randomScale = 0.8 + Math.random() * 0.2

		setRotation({ x: y, y: x })
		// setScale(randomScale)
		setIsInteracting(true)
	}

	const handleMouseUp = () => {
		setScale(1)
		handleMouseLeave()
	}

	useEffect(() => {
		if (!isInteracting) {
			const animateReturn = () => {
				setRotation(prev => {
					const newX = prev.x * 0.9
					const newY = prev.y * 0.9

					if (Math.abs(newX) < 0.5 && Math.abs(newY) < 0.5) {
						return { x: 0, y: 0 }
					}

					animationRef.current = requestAnimationFrame(animateReturn)
					return { x: newX, y: newY }
				})
			}

			animationRef.current = requestAnimationFrame(animateReturn)
		}
	}, [isInteracting])
	const showMessage = () => {
		const message = [
			'–ß–µ–ª —Ç—É—Ç —Ç–æ–∫–µ–Ω—ã –¥–æ–±—ã–≤–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º',
			'–ô–æ—É—É –±—Ä–æ, —Ç—ã —á—Ç–æ —Ö–æ–º—è–∫?!',
			'–ù–µ —Ç–∞–ø–∞–π –ø–ª–∏–∑, –∞ –≤–æ—Ç –ø–æ—á–µ—Å–∞—Ç—å –º–æ–∂–µ—à—å',
			'–Ø —á—Ç–æ –Ω–∞ —Ç–∞–ø–∞–ª–∫—É –ø–æ—Ö–æ–∂?',
			'–ù–∞—Å—á—ë—Ç —ç—Ç–æ–≥–æ –∫–ª–∏–∫–∞ –ø—Ä–∏–¥–µ—Ç—Å—è –∑–∞–ø–ª–∞—Ç–∏—Ç—å BIFS!',
			'–¢—ã —á—Ç–æ, —Å —É–º–∞ —Å–æ—à–µ–ª? –î–µ—Ä–∂–∏—Å—å, —Ç—É—Ç –æ–ø–∞—Å–Ω–æ!',
			'–ú–æ–∂–µ—Ç, —Ö–≤–∞—Ç–∏—Ç –∫–ª–∏–∫–∞—Ç—å? –ö–æ—Å–º–æ—Å –Ω–µ —Ç–µ—Ä–ø–∏—Ç —Å–ø–µ—à–∫–∏!',
			'–ö–ª–∏–∫–∞—Ç—å –º–æ–∂–Ω–æ, –Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –∞ —Ç–æ —á–µ—Ä–Ω–∞—è –¥—ã—Ä–∞ –∑–∞—Å–æ—Å–µ—Ç!',
			'–ü–æ—Ö–æ–∂–µ, —Ç—ã –∏—â–µ—à—å –±–µ–¥—É... –ò BIFS —Ç–µ–±–µ –Ω–µ –ø–æ–º–æ–∂–µ—Ç.',
			'–û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–æ–Ω–µ—Ç–∞, –∞ –ø–æ—Ä—Ç–∞–ª –≤ –¥—Ä—É–≥–æ–π –º–∏—Ä!',
			'–°–µ—Ä—å–µ–∑–Ω–æ? –¢—ã –≤ —ç—Ç–æ–º –º–∏—Ä–µ –Ω–µ –æ–¥–∏–Ω. –ù—É –∏ —á—Ç–æ, –µ—Å–ª–∏ —ç—Ç–æ BONIFACE?',
			'–Ø —Ç—É—Ç –ø–æ–¥—É–º–∞–ª... –∞ —Ç—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—à—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–∫–µ–Ω–∞–º–∏?',
			'–¢—ã –∫–ª–∏–∫–Ω—É–ª, –∞ –∫–æ—Å–º–æ—Å —Å–µ–π—á–∞—Å –Ω–∞–¥ —Ç–æ–±–æ–π —Å–º–µ–µ—Ç—Å—è.',
			'–°–∫–æ—Ä–µ–π, –∂–º–∏ –±—ã—Å—Ç—Ä–µ–µ, –ø–æ–∫–∞ —á–µ—Ä–Ω–∞—è –¥—ã—Ä–∞ –Ω–µ —Å–æ–∂—Ä–∞–ª–∞ —Ç–≤–æ–∏ BIFS!',
			'–¢—ã –¥—É–º–∞–ª, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–æ–Ω–µ—Ç–∞? –•–∞-—Ö–∞, –¥–µ—Ä–∂–∏—Å—å –∫—Ä–µ–ø—á–µ!',
			'–¢–µ–±–µ –Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –Ω–µ–º–Ω–æ–≥–æ –∑–∞–∏–≥—Ä–∞–ª—Å—è? ',
			'–ï—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è, —á–µ—Ä–Ω–∞—è –¥—ã—Ä–∞ –∑–∞–±–µ—Ä–µ—Ç –≤—Å–µ —Ç–≤–æ–∏ BIFS!',
			'–¢—ã –ø—Ä–∞–≤–¥–∞ –≤–µ—Ä–∏—à—å, —á—Ç–æ —Å–º–æ–∂–µ—à—å –≤—ã–∏–≥—Ä–∞—Ç—å —Å —ç—Ç–∏–º –∫–ª–∏–∫–æ–º?',
			'–í–æ—Ç —ç—Ç–æ –∫–ª–∏–∫! –ñ–¥—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º... –∏–ª–∏ –Ω–µ—Ç.',
			'–ù—É–∂–Ω–æ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ... –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç? –•–º–º...',
			'–ñ–º–∏ –±—ã—Å—Ç—Ä–µ–µ, —Å–∫–æ—Ä–æ —á–µ—Ä–Ω–∞—è –¥—ã—Ä–∞ –ø–æ–≥–ª–æ—Ç–∏—Ç –≤—Å—ë!',
			'–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –Ω–µ –∏–≥—Ä–∞, –Ω–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è.',
			'–¢—ã —Ç–æ—á–Ω–æ –≥–æ—Ç–æ–≤? –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫—Ä–∏–ø—Ç–∞, —ç—Ç–æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!',
			'–•–∞! –¢—ã —á—Ç–æ, –Ω–∞ —Å–≤–µ—Ä—Ö–∑–∞—Ä—è–∂–µ–Ω–Ω–æ–π —Ä–∞–∫–µ—Ç–µ –∏–ª–∏ –∫–∞–∫?',
			'–ß—Ç–æ —Ç—ã –∏—â–µ—à—å –≤ —ç—Ç–æ–π —á–µ—Ä–Ω–æ–π –¥—ã—Ä–µ? BIFS —Ç–µ–±–µ –Ω–µ –ø–æ–º–æ–∂–µ—Ç!',
			'–ö–æ—Å–º–æ—Å –∏ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É. –ù—É, –∏–ª–∏ –Ω–µ –¥–µ–ª–∞—Ç—å!',
			'–¢—ã —á—Ç–æ, –Ω–∞ –º–∏—Å—Å–∏–∏ —Å BIFS? –ü–æ–º–Ω–∏, –≤—Å—ë —ç—Ç–æ ‚Äî –Ω–µ —à—É—Ç–∫–∏!',
			'–ï—Å–ª–∏ –∫–ª–∏–∫–∞—Ç—å —Ç–∞–∫ —á–∞—Å—Ç–æ, —á–µ—Ä–Ω–∞—è –¥—ã—Ä–∞ –∑–∞–±–µ—Ä–µ—Ç –≤—Å–µ —Ç–≤–æ–∏ –∫—Ä–∏–ø—Ç–æ-–∞–∫—Ç–∏–≤—ã!',
			'–û–π, —Ç—ã –æ–ø—è—Ç—å –∫–ª–∏–∫–Ω—É–ª? –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω, –æ–Ω–∏ –Ω–µ –ø—Ä–æ—â–∞—é—Ç —Ç–∞–∫–∏–µ –æ—à–∏–±–∫–∏!',
			'–≠—Ç–æ—Ç –∫–ª–∏–∫ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Ç–≤–æ–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–º. –ò–ª–∏ –ø–µ—Ä–≤—ã–º –≤ –∫–æ—Å–º–æ—Å–µ!',
			'–ù–µ –∑–Ω–∞—é, —Å–º–æ–∂–µ—à—å –ª–∏ —Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –Ω–æ —É–¥–∞—á–∏!',
			'–¢–æ–∫–µ–Ω—ã –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –Ω–µ –¥–æ—Å—Ç–∞—é—Ç—Å—è, —á—É–≤–∞–∫, –±—É–¥—å –≥–æ—Ç–æ–≤ –ø–ª–∞—Ç–∏—Ç—å!',
			'–≠–π, —Ç—ã, –¥–µ—Ä–∂–∏ —Å–≤–æ–∏ –ø–∞–ª—å—Ü—ã –≤ —Ä—É–∫–∞—Ö! –≠—Ç–æ –Ω–µ –∏–≥—Ä—É—à–∫–∏!',
			'–í–æ—Ç —Ç—ã –∏ –ø–æ–ø–∞–ª—Å—è –≤ –ª–æ–≤—É—à–∫—É —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã... –∏ –æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç —â–∞–¥–∏—Ç—å!',
			'–ù—É—É—É—É –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å–ª–∏ —Ç—ã —Ç–∞–ø–Ω–µ—à—å –µ—â—ë 3333 —Ä–∞–∑–∞, —Ç–æ —è –¥–∞–º —Ç–µ–±–µ 33300 BIFS, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ..., –ø—Ä–æ–≤–µ—Ä–∏—à—å?!',
		]

		const emoji = [
			'üòç',
			'üöÄ',
			'üõ∏',
			'üí•',
			'üåå',
			'üëΩ',
			'üî•',
			'ü™ê',
			'üëæ',
			'üòé',
			'üíÄ',
			'ü§Ø',
			'‚ö°',
			'üëª',
			'ü§ë',
			'üíé',
			'üåç',
			'ü™ô',
			'üí£',
			'ü§î',
			'üòú',
			'üé≤',
			'üòè',
			'üòÜ',
			'üò¨',
			'üå†',
			'üòà',
			'üí∏',
		]

		const randomMessage = message[Math.floor(Math.random() * message.length)]
		const randomEmoji = emoji[Math.floor(Math.random() * emoji.length)]

		toast(`${randomMessage} ${randomEmoji}`, {
			icon: randomEmoji,
		})
	}

	return (
		<CoinFrame>
			<CoinStyled
				$rotateX={rotation.x}
				$rotateY={rotation.y}
				// $scale={scale}
				// $isInteracting={isInteracting}
				// onMouseMove={handleMove}
				// onTouchMove={handleMove}
				// onMouseLeave={handleMouseLeave}
				// onTouchEnd={handleMouseUp}
				// onMouseDown={handleMouseDown}
				// onTouchStart={handleMouseDown}
				// onMouseUp={handleMouseUp}
				// onClick={handleTap} —Ç–∞–ø–∞–∞–∞–∞–∞–∞–∞–∞–∞–ª–∫–∞–∞–∞–∞–∞
				onClick={showMessage}
			>
				<img draggable={false} src='./coin-c.png' alt='Coin' />
			</CoinStyled>
			<Toaster />
		</CoinFrame>
	)
}
