const bot = require('./config/telegramConfig')
const {
	getUserByTelegramId,
	createUser,
	updateUserTokens,
	enableMiningForUser,
	checkAndAddPugoDaily,
	addTransaction,
} = require('./services/userService')
const User = require('./models/User')
const { getUserTasks } = require('./services/taskService')
const { defineMiningAwardByStatus } = require('./utils/utils')
const YOUR_CHAT_IDES = [
	process.env.MY_CHATID,
	process.env.BRO_CHATID,
	process.env.SECOND_ACC_CHATID,
]
// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
const userReports = {}
module.exports = bot => {
	bot.on('web_app_data', async msg => {
		const chatId = msg.chat.id
		const command = msg.web_app_data.data

		if (command === '/automining') {
			bot.sendMessage(chatId, '–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥!')
		}
	})

	bot.on('web_app_data', async msg => {
		const chatId = msg.chat.id
		const data = JSON.parse(msg.web_app_data.data)

		if (data.text) {
			bot.sendMessage(chatId, `–ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: "${data.text}"`)
		}
	})

	bot.onText(/\/start/, async msg => {
		const chatId = msg.chat.id
		const telegramId = msg.from.id
		const username = msg.from.username || null

		try {
			let user = await getUserByTelegramId(telegramId)


   

			const welcomeMessageNewUser = `
‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BIFS!</b> ‚ú®

–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ:
- ü™ô –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è.
- üéÆ –ò–≥—Ä–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã.
- ü§ù –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã.
- üõ† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.

–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.
        `

			const welcomeMessageRegisteredUser = `
üåü <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${username}!</b> üåü

–ú—ã —Ä–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ BIFS! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã, –∏–≥—Ä–∞—Ç—å –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤.

${user && user.tokens ? `–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.tokens} —Ç–æ–∫–µ–Ω–æ–≤.` : ''}

–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.
        `

			// –ö–Ω–æ–ø–∫–∏
			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üìö –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
								callback_data: 'more_info',
							},
							{
								text: 'üöÄ –ù–∞—á–∞—Ç—å',
								url: 'https://t.me/BIFSCryptoBot/bifs',
							},
						],
					],
				},
			}

      if (!user) {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await createUser(telegramId, username)
        bot.sendMessage(chatId, welcomeMessageNewUser, {
          parse_mode: 'HTML',
          reply_markup: options.reply_markup,
        })
      } else {
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (user.automining) {
          await checkAndAddPugoDaily(telegramId)
        }
        bot.sendMessage(chatId, welcomeMessageRegisteredUser, {
          parse_mode: 'HTML',
          reply_markup: options.reply_markup,
        })
      }
		} catch (error) {
			console.error(error)
			bot.sendMessage(
				chatId,
				'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help'
			)
		}
	})
	bot.onText(/\/balance/, async msg => {
		const chatId = msg.chat.id
		const telegramId = msg.from.id
		const username = msg.from.username || null

		try {
			let user = await getUserByTelegramId(telegramId)

			if (user.tokens) {
				bot.sendMessage(chatId, `${username}! –£ –≤–∞—Å ${user.tokens} BIFS.`)
			} else {
				bot.sendMessage(
					chatId,
					`–ò–∑–≤–∏–Ω–∏—Ç–µ, ${user.username}! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞`
				)
			}
		} catch (error) {
			console.error(error)
			bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
		}
	})
	bot.onText(/\/mining/, async msg => {
		const chatId = msg.chat.id

		const options = {
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: '‚åö–û—Å—Ç–∞—Ç–∫–∏ –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞‚åö',
							callback_data: 'rest_mining',
						},
					],
					[{ text: 'ü´∞–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ü´∞', callback_data: 'automining' }],
				],
			},
		}
		bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', options)
	})
	bot.onText(/\/invite/, async msg => {
		const chatId = msg.chat.id

		const options = {
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: 'üé´–ú–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥üé´',
							callback_data: 'my_ref_code',
						},
					],
					[{ text: 'ü´Ç–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ãü´Ç', callback_data: 'my_ref_people' }],
				],
			},
		}
		bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', options)
	})
	bot.onText(/\/support/, async msg => {
		const chatId = msg.chat.id
		const user = msg.from

		try {
			// –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			const supportMessage = `
üõ† <b>–¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b> üõ†

–ü—Ä–∏–≤–µ—Ç${user?.first_name ? `, ${user.first_name}` : ''}! 

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, 
–Ω–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å!

üìå <b>–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>
üëâ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @bifs_manager
üëâ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç: https://t.me/BIFSCryptoBot
üëâ Email: bifs.helper@gmail.com

‚è± <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b>
–ü–Ω-–ü—Ç: 9:00-22:00 (–ú–°–ö)
–°–±-–í—Å: –æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

üìã <b>–î–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–º–æ—â–∏ —É–∫–∞–∂–∏—Ç–µ:</b>
1. –í–∞—à ID: <code>${user?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</code>
2. –°—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
3. –°–∫—Ä–∏–Ω—à–æ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        `

			// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
			await bot.sendMessage(chatId, supportMessage, {
				parse_mode: 'HTML',
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üì® –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
								url: 'https://t.me/bifs_manager',
							},
							{
								text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å',
								callback_data: 'delete_message',
							},
						],
					],
				},
			})

			// –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
			console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user?.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–¥–µ—Ä–∂–∫—É`)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /support:', error)

			// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
			await bot.sendMessage(
				chatId,
				'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é @bifs_manager'
			)
		}
	})

	bot.on('callback_query', async query => {
		if (query.data === 'delete_message') {
			try {
				await bot.deleteMessage(query.message.chat.id, query.message.message_id)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
			}
		}
	})
	bot.on('message', async msg => {
		const chatId = msg.chat.id
		const telegramId = msg.from.id
		const username = msg.from.username || '–ù–µ —É–∫–∞–∑–∞–Ω'
		const text = msg.text || msg.caption || '' // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
		const document = msg.document
		const photo = msg.photo

		// –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
		const knownCommands = [
			'/start',
			'/help',
			'/balance',
			'/tasks',
			'/invite',
			'/store',
			'/mining',
		]

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "bif-–æ—Ç—á–µ—Ç"
		if (text.toLowerCase().startsWith('bif-–æ—Ç—á–µ—Ç')) {
			// –£–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "bif-–æ—Ç—á–µ—Ç" –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞
			const reportText = text.replace(/^bif-–æ—Ç—á–µ—Ç\s*/i, '').trim()

			// –°–æ—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç
			let fullReportText = `–û—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
Username: ${username}
Telegram ID: ${telegramId}
Chat ID: ${chatId}
–î–∞—Ç–∞: ${new Date().toLocaleString()}
–¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞: ${reportText || '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}`

			// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
			const checkFileSize = async fileId => {
				const file = await bot.getFile(fileId)
				return file.file_size <= 15 * 1024 * 1024 // 2 –ú–ë –≤ –±–∞–π—Ç–∞—Ö
			}

			// –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ä–∞–∑–º–µ—Ä
			let documentLink = ''
			if (document) {
				const fileId = document.file_id
				const isValidSize = await checkFileSize(fileId)

				if (isValidSize) {
					const fileLink = await bot.getFileLink(fileId)
					documentLink = `–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: ${fileLink}`
				} else {
					bot.sendMessage(
						chatId,
						'–î–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 2 –ú–ë.'
					)
					return // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
				}
			}

			// –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ä–∞–∑–º–µ—Ä
			let photoLink = ''
			if (photo) {
				const fileId = photo[photo.length - 1].file_id // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (—Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ)
				const isValidSize = await checkFileSize(fileId)

				if (isValidSize) {
					const fileLink = await bot.getFileLink(fileId)
					photoLink = `–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ: ${fileLink}`
				} else {
					bot.sendMessage(
						chatId,
						'–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 2 –ú–ë.'
					)
					return // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
				}
			}

			// –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ñ–æ—Ç–æ –≤ –æ—Ç—á–µ—Ç
			if (documentLink || photoLink) {
				fullReportText += `\n\n${documentLink}\n\n${photoLink}`
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Å–ø–∏—Å–∫–∞ YOUR_CHAT_IDES
			YOUR_CHAT_IDES.forEach(chatId => {
				bot
					.sendMessage(chatId, fullReportText)
					.then(() => {
						console.log(`–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chatId: ${chatId}`)
					})
					.catch(error => {
						console.error(
							`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chatId: ${chatId}`,
							error
						)
					})
			})

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			bot.sendMessage(chatId, '–í–∞—à –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ!')
		}
		// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "bif-–æ—Ç—á–µ—Ç" –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
		else if (!knownCommands.includes(text.toLowerCase())) {
			bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.')
		}
	})
	// –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
	bot.onText(/\/help/, async msg => {
		const chatId = msg.chat.id

		const options = {
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: 'üìö –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ',
							callback_data: 'more_info',
						},
					],
					[
						{
							text: 'üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†',
							callback_data: 'support',
						},
					],
				],
			},
		}

		bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å:', options)
	})
	bot.onText(/\/store/, async msg => {
		const chatId = msg.chat.id

		const options = {
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω',
							callback_data: 'pay',
						},
					],
				],
			},
		}

		bot.sendMessage(chatId, '–î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω!', options)
	})

	const products = {
		50: { stars: 50, pugo: 150, description: '150 BIFS' },
		150: { stars: 150, pugo: 500, description: '500 BIFS' },
		500: { stars: 500, pugo: 2000, description: '2000 BIFS' },
		1000: {
			stars: 1000,
			pugo: 5000,
			description: '5000 BIFS',
		},
		2500: {
			stars: 2500,
			pugo: 15000,
			description: '15000 BIFS',
		},
	}

	// –ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞
	const autominingProducts = {
		7: {
			stars: 777,
			days: 7,
			description: '7 –¥–Ω–µ–π –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞',
		},
		21: {
			stars: 1500,
			days: 21,
			description: '21 –¥–µ–Ω—å –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞',
		},
		40: {
			stars: 2222,
			days: 40,
			description: '40 –¥–Ω–µ–π –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞',
		},
	}

	bot.on('callback_query', async query => {
		const chatId = query.message.chat.id
		if (query.data === 'attach_report') {
			bot.sendMessage(
				chatId,
				'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å). –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å–æ —Å–ª–æ–≤–∞:  bif-–æ—Ç—á–µ—Ç:'
			)
		}

		if (query.data === 'pay') {
			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: 'ü™ô –¢–æ–∫–µ–Ω—ã', callback_data: 'tokens' },
							{ text: 'ü§ë –ê–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥', callback_data: 'automining' },
						],
						[
							{
								text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
								callback_data: 'more_info',
							},
						],
					],
				},
			}

			const welcomeImageUrl =
				'https://i.postimg.cc/qv7mZsN5/a8e6e245-3e60-4a46-8325-30b14cc50bf7.jpg' // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

			const messageText = `
  ‚ú® <b>–ú–∞–≥–∞–∑–∏–Ω:</b> ‚ú®
  
  üìå <b>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è.</b>
      `

			bot.sendPhoto(chatId, welcomeImageUrl, {
				caption: messageText,
				parse_mode: 'HTML',
				reply_markup: options.reply_markup,
			})
		}

		if (query.data.startsWith('buy_')) {
			const productKey = query.data.split('_')[1]
			const product = products[productKey]

			if (product) {
				bot.sendInvoice(
					chatId,
					`–ü–æ–∫—É–ø–∫–∞: ${product.pugo} PUGO`,
					product.description,
					`pugos_${product.stars}_${product.pugo}`,
					`${process.env.PROVIDER_TOKEN}`,
					'XTR',

					[
						{
							amount: product.stars,
							label: `–ö—É–ø–∏—Ç—å ${product.pugo} PUGO`,
						},
					],

					{
						flexible: true,
						photo_url:
							'https://i.postimg.cc/KcBsK7k6/f4e44cae-b3d4-4dde-bbf1-67330296d6b8-1.png',
						photo_width: 400,
						photo_height: 400,
					}
				)
			}
		}

		if (query.data.startsWith('mining_')) {
			const productKey = query.data.split('_')[1]
			const product = autominingProducts[productKey]

			if (product) {
				bot.sendInvoice(
					chatId,
					`–ü–æ–∫—É–ø–∫–∞: ${product.days} –¥–Ω–µ–π –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞`,
					product.description,
					`automining_${product.stars}_${product.days}`,
					`${process.env.PROVIDER_TOKEN}`,
					'XTR',
					[
						{
							amount: product.stars,
							label: `–ö—É–ø–∏—Ç—å ${product.days} –¥–Ω–µ–π`,
						},
					],
					{
						flexible: true,
						photo_url:
							'https://i.postimg.cc/ZR3jdZR8/49978d67-848d-406a-83c5-335292717f6c.jpg',
						photo_width: 400,
						photo_height: 400,
					}
				)
			}
		}

		if (query.data === 'tokens') {
			// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
			const productButtons = Object.keys(products).map(productKey => [
				{
					text: `${products[productKey].pugo} BIFS –∑–∞ ${products[productKey].stars} Stars`,
					callback_data: `buy_${productKey}`,
				},
			])

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è" –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
			const returnButton = [
				{
					text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
					callback_data: 'more_info',
				},
			]

			// –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è"
			const options = {
				reply_markup: {
					inline_keyboard: [...productButtons, returnButton],
				},
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
			bot.sendMessage(
				chatId,
				'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:',
				options
			)
		}

		if (query.data === 'automining') {
			const options = {
				reply_markup: {
					inline_keyboard: Object.keys(autominingProducts).map(productKey => [
						{
							text: `${autominingProducts[productKey].days} –¥–Ω–µ–π –∑–∞ ${autominingProducts[productKey].stars} Stars`,
							callback_data: `mining_${productKey}`,
						},
					]),
				},
			}
			bot.sendMessage(
				chatId,
				'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:',
				options
			)
		}
		if (query.data === 'mining') {
			const chatId = query.message.chat.id
			const user = query.from
			const messageId = query.message.message_id

			try {
				// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
				const userData = await getUserByTelegramId(user.id)

				// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞–π–Ω–∏–Ω–≥–µ
				const miningStatus = userData?.automining
					? `‚õè <b>–í–∞—à –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω</b>\n\n` +
					  `üí∞ –î–æ—Ö–æ–¥: ${defineMiningAwardByStatus(userData.status)} BIFS/–¥–µ–Ω—å\n` +
					  `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${formatRemainingTime(
							userData.autominingExpiresAt
					  )}\n\n` +
					  `–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –º–∞–π–Ω–∏–Ω–≥–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.`
					: `üîã <b>–ê–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n` +
					  `–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç 1000 BIFS –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!\n\n`

				const options = {
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: userData?.automining
										? 'üíé –ü—Ä–æ–¥–ª–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥'
										: 'ü´∞ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–∞–π–Ω–∏–Ω–≥',
									callback_data: 'automining',
								},
							],
							[
								{
									text: '‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥',
									callback_data: 'mining_info',
								},
							],
							[
								{
									text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
									callback_data: 'more_info',
								},
							],
						],
					},
					parse_mode: 'HTML',
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
				await bot.sendMessage(
					chatId,
					`üî∑ <b>–ú–µ–Ω—é –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞</b> üî∑\n\n${miningStatus}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
					options
				)

				// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
				console.log(
					`[Mining Menu] User ${user.id} (${
						user.username || 'no username'
					}) opened mining menu`
				)
			} catch (error) {
				console.error('[Mining Menu Error]', error)

				await bot.sendMessage(
					chatId,
					'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
					{
						reply_to_message_id: messageId,
						disable_notification: true,
					}
				)
			}
		} else if (query.data === 'mining_info') {
			const infoText = `
  ‚ÑπÔ∏è <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥?</b>
  
  ‚è∞ <b>–í—Ä–µ–º—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:</b>
  –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç 1 —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –≤ <b>00:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏</b>
  
  üí∏ <b>–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:</b>
  1. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç–µ –º–∞–π–Ω–∏–Ω–≥ –Ω–∞ –≤—Ä–µ–º—è(–∑–∞ –¢–µ–ª–µ–≥—Ä–∞–º Stars –∏–ª–∏ –≤—ã–±–∏–≤–∞–µ—Ç–µ –≤ –∫–µ–π—Å–∞—Ö)
  2. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å –ø–æ–ª—É—á–∞–µ—Ç–µ 1000 BIFS
  3. –ß–µ—Ä–µ–∑ –≤—Ä–µ–º—è –º–∞–π–Ω–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è
  
  üìà <b>–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á—ë—Ç–∞:</b>
  ‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: 700 Stars
  ‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ 7 –¥–Ω–µ–π: 7000 BIFS (1000√ó7)
  
  üîÅ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ:</b>
  –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
  –ö–∞–∂–¥–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫—É–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π –º–∞–π–Ω–∏–Ω–≥–∞
  
  ‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
  –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ–¥–ª–∏—Ç—å –≤–æ–≤—Ä–µ–º—è - –º–∞–π–Ω–∏–Ω–≥ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è
  –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ BIFS –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ
  `

			await bot.editMessageText(infoText, {
				chat_id: query.message.chat.id,
				message_id: query.message.message_id,
				parse_mode: 'HTML',
				reply_markup: {
					inline_keyboard: [
						[{ text: 'ü´∞ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–∞–π–Ω–∏–Ω–≥', callback_data: 'automining' }],
						[
							{
								text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
								callback_data: 'mining',
							},
						],
					],
				},
			})
		}

		// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
		function formatRemainingTime(expiryDate) {
			if (!expiryDate) return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

			const now = new Date()
			const expiry = new Date(expiryDate)
			const diff = expiry.getTime() - now.getTime()

			if (diff <= 0) return '–∑–∞–≤–µ—Ä—à–µ–Ω'

			const days = Math.floor(diff / (1000 * 60 * 60 * 24))
			const hours = Math.floor(
				(diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
			)
			const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))

			return `${days}–¥ ${hours}—á ${minutes}–º`
		}

		if (query.data === 'more_info') {
			// –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üöÄ –ö–∞–∫ –Ω–∞—á–∞—Ç—å üöÄ',
								callback_data: 'how_to_start',
							},
						],
						[
							{
								text: 'üí≥ –ú–∞–≥–∞–∑–∏–Ω',
								callback_data: 'pay',
							},
							{
								text: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π ü§ù',
								callback_data: 'invite_info',
							},
						],

						[
							{
								text: '‚öíÔ∏è –ó–∞–¥–∞–Ω–∏—è',
								callback_data: 'tasks',
							},
							{
								text: '–ê–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥ üíé',
								callback_data: 'mining',
							},
						],

						[
							{
								text: 'ü§ë–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—åü§ë',
								callback_data: 'ads_info',
							},
						],
						[
							{
								text: 'üöÄ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã',
								callback_data: 'tokens_info',
							},
							{
								text: '–¶–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ üí∞',
								callback_data: 'value_info',
							},
						],

						[
							{
								text: 'üéØ –ù–∞—à–∏ —Ü–µ–ª–∏',
								callback_data: 'goals_info',
							},
							{
								text: '–û –±–æ—Ç–µ BIF ü§ñ',
								callback_data: 'bot_info',
							},
						],
						[
							{
								text: 'üìÉ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã',
								callback_data: 'commands',
							},
							{
								text: 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
								callback_data: 'support',
							},
						],
						[
							{
								text: 'üåê –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ üåê',
								callback_data: 'socials',
							},
						],
					],
				},
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
			bot.sendMessage(
				chatId,
				'‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:</b>',
				{ parse_mode: 'HTML', reply_markup: options.reply_markup }
			)
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
		else if (query.data === 'tokens_info') {
			const welcomeImageUrl =
				'https://i.postimg.cc/mktYywXY/ecaac154-ca2b-4793-b9d7-9142945b94d6.jpg' // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

			const messageText = `
  ‚ú® <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã:</b> ‚ú®
  
  üìå <b>–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–∫–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:</b>

  1. üéÆ <b>–ò–≥—Ä–∞—è –≤ –∏–≥—Ä—ã</b> ‚Äî –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã, –ø—Ä–æ—Ö–æ–¥—è —É—Ä–æ–≤–Ω–∏ –∏ –≤—ã–ø–æ–ª–Ω—è—è –∏–≥—Ä–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è.

  2. üìù <b>–í—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è</b> ‚Äî –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥.

  3. ü§ù <b>–ü—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π</b> ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞.

  4. üì¢ <b>–†–µ–∫–ª–∞–º–∏—Ä—É—è –Ω–∞—Å</b> ‚Äî –¥–µ–ª–∏—Ç–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
  
  üí° <b>–ö–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ —Ç–æ–∫–µ–Ω–∞—Ö BIFS!</b>
      `

			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
								callback_data: 'more_info',
							},
						],
					],
				},
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
			bot.sendPhoto(chatId, welcomeImageUrl, {
				caption: messageText,
				parse_mode: 'HTML',
				reply_markup: options.reply_markup,
			})
		} else if (query.data === 'value_info') {
			const welcomeImageUrl =
				'https://i.postimg.cc/9zHhYxmK/f7e51697-4623-4af7-9d26-2bf4fa7b1620.jpg' // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

			const messageText = `
    ‚ú® <b>–¶–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ BIFS:</b> ‚ú®
    
    üíé <b>–¢–æ–∫–µ–Ω—ã BIFS ‚Äî —ç—Ç–æ –≤–∞—à–∞ –≤–∞–ª—é—Ç–∞ –≤ –º–∏—Ä–µ BIFS!</b>
    
    üìå <b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å —Ç–æ–∫–µ–Ω–∞–º–∏:</b>
    
    1. üõ† <b>–ü–æ–∫—É–ø–∞–π—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è</b>
       - –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∏–≥—Ä–∞—Ö –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.
    
    2. üöÄ <b>–ü–æ–ª—É—á–∞–π—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b>
       - –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É.
    
    3. üíº <b>–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –±—É–¥—É—â–µ–µ</b>
       - –í –±—É–¥—É—â–µ–º —Ç–æ–∫–µ–Ω—ã BIFS –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã.
    
    4. üéÅ <b>–ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã</b>
       - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ü–∏—è—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤.
    
    üí° <b>–¢–æ–∫–µ–Ω—ã BIFS ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤–∞–ª—é—Ç–∞, —ç—Ç–æ –∫–ª—é—á –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º!</b>
        `

			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
								callback_data: 'more_info',
							},
						],
					],
				},
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
			bot.sendPhoto(chatId, welcomeImageUrl, {
				caption: messageText,
				parse_mode: 'HTML',
				reply_markup: options.reply_markup,
			})
		} else if (query.data === 'tasks') {
			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è',
								callback_data: 'available_task',
							},
						],
						[
							{
								text: '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è',
								callback_data: 'completed_task',
							},
						],
						[
							{
								text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
								callback_data: 'more_info',
							},
						],
					],
				},
			}
			const welcomeImageUrl =
				'https://i.postimg.cc/MTs0B4DZ/d43d5b0f-9edf-4f7e-a27d-1277068f5ddd.jpg'

			const messageText = `
    ü§ù <b>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ:</b>
    
    üéâ <b>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏—Ö –º–æ–∂–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!</b>

    
    üòä <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
       1. –í—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.
       2. –ë–æ—Ç –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ.
       3. –í–∞–º –Ω–∞—á–∏—Å–ª—è—é—Ç —Ç–æ–∫–µ–Ω—ã!
    `

			bot.sendPhoto(chatId, welcomeImageUrl, {
				caption: messageText,
				parse_mode: 'HTML',
				reply_markup: options.reply_markup,
			})
		} else if (query.data === 'invite_info') {
			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üé´ –ú–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ üé´',
								callback_data: 'my_ref_code',
							},
						],
						[
							{
								text: 'ü´Ç –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã ü´Ç',
								callback_data: 'my_ref_people',
							},
						],
						[
							{
								text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
								callback_data: 'more_info',
							},
						],
					],
				},
			}

			const welcomeImageUrl =
				'https://i.postimg.cc/pr2Q5v86/6d794a94-4b25-4d3e-9145-81011089652c.jpg' // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

			const messageText = `
    ü§ù <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π:</b>
    
    üéâ <b>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!</b>
       - –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã.
       - –í–∞—à–∏ –¥—Ä—É–∑—å—è —Ç–æ–∂–µ –ø–æ–ª—É—á–∞—Ç –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    
    üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
       1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏.
       2. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.
       3. –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ!
    
    üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>
    `

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
			bot.sendPhoto(chatId, welcomeImageUrl, {
				caption: messageText,
				parse_mode: 'HTML',
				reply_markup: options.reply_markup,
			})
		} else if (query.data === 'ads_info') {
			const welcomeImageUrl =
				'https://i.postimg.cc/brBGYfRb/a6d977c2-f469-4c0c-8ea1-d98f704bbb62.jpg'

			const messageText = `
  ‚ú® <b>–ü—Ä–æ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ –†–µ–∫–ª–∞–º–µ:</b> ‚ú®
  
  üìå <b>–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –≥–æ—Ç–æ–≤—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞—Ç—å –≤–∞—Å –∑–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!</b>
  
  üéØ <b>–í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
  
  1. üéÆ <b>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç</b>
     - –ü–∏—à–∏—Ç–µ –ø–æ—Å—Ç—ã, —Å–Ω–∏–º–∞–π—Ç–µ –≤–∏–¥–µ–æ (TikTok, Shorts), –¥–µ–ª–∞–π—Ç–µ –º–µ–º—ã –∏–ª–∏ –¥–∞–∂–µ —Ä–∞—Å–∫–ª–µ–∏–≤–∞–π—Ç–µ –ª–∏—Å—Ç–æ–≤–∫–∏.
     - –í—Å—ë, —á—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É, –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º —Ç–æ–∫–µ–Ω—ã!
  
  2. üìù <b>–ü–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã</b>
     - –ß–µ–º –±–æ–ª—å—à–µ –ª—é–¥–µ–π —É–≤–∏–¥—è—Ç –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç, —Ç–µ–º –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ.
  
  3. ü§ù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á—ë—Ç</b>
     - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, —Ä–∞–∑–¥–µ–ª "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å" –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –æ—Ç—á—ë—Ç".
     - –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç <b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –æ—Ç—á–µ—Ç</b>.
  
  4. üì¢ <b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ:</b>
     - –°—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç.
     - –°–∫—Ä–∏–Ω—à–æ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.
     - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è.

     <b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û</b> —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å–æ —Å–ª–æ–≤–∞:  <b>bif-–æ—Ç—á–µ—Ç:</b>
  
  üí° <b>–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞—á–∏—Å–ª–∏–º —Ç–æ–∫–µ–Ω—ã. –ß–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ–µ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç, —Ç–µ–º –±–æ–ª—å—à–µ –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ!</b>
      `

			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
								callback_data: 'more_info',
							},
							{
								text: 'üñáÔ∏è –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –æ—Ç—á–µ—Ç',
								callback_data: 'attach_report',
							},
						],
					],
				},
			}

			bot.sendPhoto(chatId, welcomeImageUrl, {
				caption: messageText,
				parse_mode: 'HTML',
				reply_markup: options.reply_markup,
			})
		} else if (query.data === 'goals_info') {
			const welcomeImageUrl = 'https://i.postimg.cc/05GjV3Kc/3.png' // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

			const messageText = `
  ‚ú® <b>–ù–∞—à–∏ —Ü–µ–ª–∏:</b> ‚ú®
  
  üéØ <b>–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å—Ç–∞—Ç—å –æ–¥–Ω–∏–º –∏–∑ –≤–µ–¥—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!</b>
  
  üìå <b>–ù–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Ü–µ–ª–∏:</b>
  
  1. üåê <b>–õ–∏—Å—Ç–∏–Ω–≥ –Ω–∞ –∫—Ä—É–ø–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö</b>
     - –ú—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–π—Ç–∏ –Ω–∞ —Ç–∞–∫–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –∫–∞–∫ BLUM, STON.fi DEX, BYBIT –∏ Binance.
  
  2. üöÄ <b>–†–∞–∑–≤–∏—Ç–∏–µ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã</b>
     - –ú—ã –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∏–≥—Ä, –∑–∞–¥–∞–Ω–∏–π –∏ —Ñ—É–Ω–∫—Ü–∏–π.
  
  3. ü§ù <b>–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</b>
     - –ú—ã —Ö–æ—Ç–∏–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ª—é–¥–µ–π —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –≤–æ–∫—Ä—É–≥ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
  
  4. üí° <b>–£–¥–æ–±—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</b>
     - –ú—ã –¥–µ–ª–∞–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ.
  
  üí° <b>–ú—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –¥–≤–∏–∂–µ–º—Å—è –∫ —ç—Ç–∏–º —Ü–µ–ª—è–º –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–≥–æ —É—Å–ø–µ—Ö–∞!</b>
      `

			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
								callback_data: 'more_info',
							},
						],
					],
				},
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
			bot.sendPhoto(chatId, welcomeImageUrl, {
				caption: messageText,
				parse_mode: 'HTML',
				reply_markup: options.reply_markup,
			})
		} else if (query.data === 'bot_info') {
			const welcomeImageUrl =
				'https://i.postimg.cc/J0Zw0bNq/0167d904-9aa7-4d73-aee9-6e7511a1a2c9-1.png' // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

			const messageText = `
  ‚ú® <b>–û –±–æ—Ç–µ BIF:</b> ‚ú®
  
  ü§ñ <b>–ù–∞—à Telegram-–±–æ—Ç ‚Äî —ç—Ç–æ –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ BIFS!</b>
  
  üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:</b>
  
  1. ü™ô <b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤</b>
     - –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è, –∏–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã.
  
  2. ü§ù <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π</b>
     - –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ.
  
  3. üõ† <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º</b>
     - –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –±–∞–ª–∞–Ω—Å, –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞.
  
  4. üì¢ <b>–†–µ–∫–ª–∞–º–∞ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ</b>
     - –ü–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –∑–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.
  
  5. üéÆ <b>–ò–≥—Ä—ã –∏ –∑–∞–¥–∞–Ω–∏—è</b>
     - –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∏–≥—Ä–∞—Ö –∏ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥.
  
  üí° <b>–° –±–æ—Ç–æ–º BIF –≤—ã –≤—Å–µ–≥–¥–∞ –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π –∏ –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏!</b>
      `

			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
								callback_data: 'more_info',
							},
						],
					],
				},
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
			bot.sendPhoto(chatId, welcomeImageUrl, {
				caption: messageText,
				parse_mode: 'HTML',
				reply_markup: options.reply_markup,
			})
		}
		if (query.data === 'how_to_start') {
			const welcomeImageUrl =
				'https://i.postimg.cc/YqNKwzq2/c912d4a4-4baa-40ce-aae1-53bc15163b8c.jpg' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

			const messageText = `
  ‚ú® <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b> ‚ú®
  
  üöÄ <b>1. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>
     - –≠—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
  
  üéâ <b>2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>
     - –í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
  
  üéÅ <b>3. –ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å 50 —Ç–æ–∫–µ–Ω–æ–≤</b>
     - –í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å —É–∂–µ –∂–¥–µ—Ç –≤–∞—Å!
  
  üì± <b>4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</b>
     - <a href="https://t.me/BIFSCryptoBot/bifs">–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</a>
  
  üòç <b>5. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>
     - –ò–≥—Ä–∞–π—Ç–µ, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Ä–µ–∫–ª–∞–º–∏—Ä—É–π—Ç–µ –Ω–∞—Å, –∏—â–∏—Ç–µ –ø–∞—Å—Ö–∞–ª–∫–∏! 
      `

			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
								callback_data: 'more_info',
							},
							{
								text: 'üöÄ –ü–æ–µ—Ö–∞–ª–∏!',
								url: 'https://t.me/BIFSCryptoBot/bifs',
							},
						],
					],
				},
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
			bot.sendPhoto(chatId, welcomeImageUrl, {
				caption: messageText,
				parse_mode: 'HTML',
				reply_markup: options.reply_markup,
			})
		} else if (query.data === 'support') {
			const chatId = query.message.chat.id
			const user = query.from
			const messageId = query.message.message_id

			try {
				// –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				const supportMessage = `
  üõ† <b>–¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b> üõ†
  
  –ü—Ä–∏–≤–µ—Ç${user?.first_name ? `, ${user.first_name}` : ''}! 
  
  –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, 
  –Ω–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å!
  
  üìå <b>–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>
  üëâ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @bifs_manager
  üëâ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç: https://t.me/BIFSCryptoBot
  üëâ Email: bifs.helper@gmail.com
  
  ‚è± <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b>
  –ü–Ω-–ü—Ç: 9:00-22:00 (–ú–°–ö)
  –°–±-–í—Å: –æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
  
  üìã <b>–î–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–º–æ—â–∏ —É–∫–∞–∂–∏—Ç–µ:</b>
  1. –í–∞—à ID: <code>${user?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</code>
  2. –°—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
  3. –°–∫—Ä–∏–Ω—à–æ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
          `

				// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
				await bot.editMessageText(supportMessage, {
					chat_id: chatId,
					message_id: messageId,
					parse_mode: 'HTML',
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: 'üì® –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
									url: 'https://t.me/bifs_manager',
								},

								{
									text: 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é',
									callback_data: 'more_info',
								},
							],
						],
					},
				})

				// –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
				console.log(
					`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user?.id} (${
						user?.username || '–±–µ–∑ username'
					}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–¥–µ—Ä–∂–∫—É`
				)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error)

				try {
					// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
					await bot.sendMessage(
						chatId,
						'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é @bifs_manager\n\n' +
							'–ö–æ–¥ –æ—à–∏–±–∫–∏: ' +
							(error instanceof Error ? error.message : 'unknown'),
						{
							reply_to_message_id: messageId,
							disable_notification: true,
						}
					)
				} catch (sendError) {
					console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError)
				}
			}
		} else if (query.data === 'completed_task') {
			try {
				let user = await getUserByTelegramId(query.from.id)
				if (user) {
					const tasks = await getUserTasks(query.from.id)

					// –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
					const completedTasks = tasks.filter(
						task => task.UserTask.status === 'completed'
					)

					if (completedTasks.length > 0) {
						// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
						const tasksList = completedTasks
							.map(
								(task, index) =>
									`${index + 1}. **${task.reward}**: ${
										task.description
									} [–°—Å—ã–ª–∫–∞](${task.link})`
							)
							.join('\n')

						// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
						const backButton = {
							text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
							callback_data: 'tasks', // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
						}

						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
						bot.sendMessage(
							chatId,
							`‚úÖ *–í–∞—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n${tasksList}`,
							{
								parse_mode: 'Markdown', // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Markdown
								reply_markup: {
									inline_keyboard: [[backButton]], // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
								},
							}
						)
					} else {
						// –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
						const backButton = {
							text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
							callback_data: 'tasks',
						}

						bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.', {
							reply_markup: {
								inline_keyboard: [[backButton]], // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
							},
						})
					}
				} else {
					bot.sendMessage(
						chatId,
						`–ò–∑–≤–∏–Ω–∏—Ç–µ, ${query.from.username}! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞.`
					)
				}
			} catch (error) {
				console.error(error)
				bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.')
			}
		} else if (query.data === 'available_task') {
			try {
				let user = await getUserByTelegramId(query.from.id)
				if (user) {
					const tasks = await getUserTasks(query.from.id)

					// –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏
					const availableTasks = tasks.filter(
						task => task.UserTask.status === 'available'
					)

					if (availableTasks.length > 0) {
						// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
						const tasksList = availableTasks
							.map(
								(task, index) =>
									`${index + 1}. **${task.reward}**: ${
										task.description
									} [–°—Å—ã–ª–∫–∞](${task.link})`
							)
							.join('\n')

						// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
						const backButton = {
							text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
							callback_data: 'tasks', // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
						}

						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
						bot.sendMessage(chatId, `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n${tasksList}`, {
							parse_mode: 'Markdown', // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Markdown
							reply_markup: {
								inline_keyboard: [[backButton]], // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
							},
						})
					} else {
						// –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
						const backButton = {
							text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
							callback_data: 'tasks',
						}

						bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á.', {
							reply_markup: {
								inline_keyboard: [[backButton]], // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
							},
						})
					}
				} else {
					bot.sendMessage(
						chatId,
						`–ò–∑–≤–∏–Ω–∏—Ç–µ, ${query.from.username}! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞.`
					)
				}
			} catch (error) {
				console.error(error)
				bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.')
			}
		} else if (query.data === 'my_ref_code') {
			try {
				let user = await getUserByTelegramId(query.from.id)
				if (user.referralCode) {
					const botUsername = 'BIFSCryptoBot'
					const referralCode = user.referralCode
					const referralLink = `https://t.me/${botUsername}/bifs?startapp=${referralCode}`
					bot.sendMessage(
						chatId,
						`–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}, –∞ –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${referralLink}`
					)
				} else {
					bot.sendMessage(
						chatId,
						`–ò–∑–≤–∏–Ω–∏—Ç–µ, ${user.username}! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞`
					)
				}
			} catch (error) {
				console.error(error)
				bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.')
			}
		} else if (query.data === 'rest_mining') {
			try {
				let user = await getUserByTelegramId(query.from.id)
				if (user && user.autominingExpiresAt) {
					const now = new Date()
					const expiry = new Date(user.autominingExpiresAt)
					const diffTime = expiry.getTime() - now.getTime()

					if (diffTime <= 0) {
						bot.sendMessage(
							chatId,
							`‚è≥ –í–∞—à –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞!`
						)
					} else {
						const days = Math.floor(diffTime / (1000 * 60 * 60 * 24))
						const hours = Math.floor(
							(diffTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
						)
						const minutes = Math.floor(
							(diffTime % (1000 * 60 * 60)) / (1000 * 60)
						)

						// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤
						const pluralize = (num, words) => {
							const cases = [2, 0, 1, 1, 1, 2]
							return words[
								num % 100 > 4 && num % 100 < 20
									? 2
									: cases[Math.min(num % 10, 5)]
							]
						}

						const daysText = pluralize(days, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'])
						const hoursText = pluralize(hours, ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'])
						const minutesText = pluralize(minutes, [
							'–º–∏–Ω—É—Ç–∞',
							'–º–∏–Ω—É—Ç—ã',
							'–º–∏–Ω—É—Ç',
						])

						const endDate = expiry.toLocaleDateString('ru-RU', {
							day: 'numeric',
							month: 'long',
							year: 'numeric',
							hour: '2-digit',
							minute: '2-digit',
						})

						bot.sendMessage(
							chatId,
							`‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –º–∞–π–Ω–∏–Ω–≥–∞:\n\n` +
								`üïí ${days} ${daysText}, ${hours} ${hoursText}, ${minutes} ${minutesText}\n\n` +
								`üìÖ –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: ${endDate}`
						)
					}
				} else {
					bot.sendMessage(
						chatId,
						`üîç ${
							user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
						}, —É –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥!`
					)
				}
			} catch (error) {
				console.error(error)
				bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞–π–Ω–∏–Ω–≥–∞.')
			}
		} else if (query.data === 'my_ref_people') {
			try {
				const user = await getUserByTelegramId(query.from.id)

				if (user.referrals && user.referrals.length > 0) {
					let referrals = []
					for (let refId of user.referrals) {
						const refUser = await getUserByTelegramId(refId)
						referrals.push(refUser)
					}

					const referralNames = referrals
						.map(ref => '@' + ref.username)
						.join(', ')
					bot.sendMessage(
						chatId,
						`–£ –≤–∞—Å ${referrals.length} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralNames}`
					)
				} else {
					bot.sendMessage(
						chatId,
						`–ò–∑–≤–∏–Ω–∏—Ç–µ, ${user.username}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.`
					)
				}
			} catch (error) {
				console.error(error)
				bot.sendMessage(
					chatId,
					'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö.'
				)
			}
		} else if (query.data === 'commands') {
			const messageText = `
  üìú <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
  
  üöÄ <b>/start</b> ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.
  üõí <b>/store</b> ‚Äî –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —É—Å–ª—É–≥.
  üí∞ <b>/balance</b> ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤.
  üìã <b>/tasks</b> ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
  ü§ù <b>/invite</b> ‚Äî –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã.
  üíé <b>/mining</b> ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–µ.
  üÜò <b>/support</b> ‚Äî –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.

  üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã!</b>
      `

			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
								callback_data: 'more_info',
							},
						],
					],
				},
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
			bot.sendMessage(chatId, messageText, {
				parse_mode: 'HTML',
				reply_markup: options.reply_markup,
			})
		} else if (query.data === 'socials') {
			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: '1Ô∏è‚É£ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª',
								url: 'https://t.me/BIFScryptoSpace',
							},
							{
								text: '2Ô∏è‚É£ –°–∞–π—Ç',
								url: 'https://bifscoin.ru/',
							},
						],
						// [
						// 	{
						// 		text: '3Ô∏è‚É£ YouTube',
						// 		url: 'https://youtube.com/',
						// 	},
						// 	{
						// 		text: '4Ô∏è‚É£ X(Twitter)',
						// 		url: 'https://x.com/',
						// 	},
						// ],
						[
							{
								text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
								callback_data: 'more_info',
							},
						],
					],
				},
			}

			bot.sendMessage(chatId, '‚ú® <b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ—Ü—Å–µ—Ç–∏ BIFS:</b>', {
				parse_mode: 'HTML',
				reply_markup: options.reply_markup,
			})
			bot.answerCallbackQuery(query.id)
		}

		bot.answerCallbackQuery(query.id)
	})

	bot.on('pre_checkout_query', async query => {
		const { id, currency, total_amount } = query

		if (currency === 'XTR' && total_amount === 1) {
			bot.answerPreCheckoutQuery(id, true)
		} else {
			bot.answerPreCheckoutQuery(id, false, '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∏–ª–∏ –≤–∞–ª—é—Ç–∞')
		}
	})

	bot.on('successful_payment', async msg => {
		const userId = msg.chat.id
		const {
			total_amount,
			currency,
			invoice_payload: payload,
		} = msg.successful_payment

		console.log({ total_amount, currency, payload })

		if (payload) {
			const [type, stars, value] = payload.split('_')
			console.log({ type, stars, value })

			if (type === 'pugos') {
				await updateUserTokens(userId, parseInt(value))

				await addTransaction(
					userId,
					parseInt(stars),
					'–ö—É–ø–ª–µ–Ω–æ BIFS',
					parseInt(value)
				)

				bot.sendMessage(
					userId,
					`‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ ${total_amount} ${currency}. –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${value} BIFS!`
				)
			} else if (type === 'automining') {
				await enableMiningForUser(userId, parseInt(value))

				await addTransaction(
					userId,
					parseInt(stars),
					`–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${value} –¥–Ω–µ–π –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞`,
					parseInt(value)
				)

				bot.sendMessage(
					userId,
					`‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ ${total_amount} ${currency}. –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ ${value} –¥–Ω–µ–π –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞!`
				)
			}
		}
	})
}
