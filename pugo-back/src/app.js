const cors = require('cors')
const express = require('express')
const dotenv = require('dotenv')
const { sequelize } = require('./models')
const exchangeRoutes = require('./routes/exchange')
const walletRoutes = require('./routes/wallet')
const userRoutes = require('./routes/userRotes')
const taskRoutes = require('./routes/taskRoutes')
const telegramRegisterRouter = require('./routes/telegram-register')
const CONTENT = require('./content')
const bot = require('./config/telegramConfig')
const setupBotCommands = require('./botCommands') // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –±–æ—Ç–∞

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

const app = express()

// Middleware
app.use(cors())
app.use(express.json())

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
app.use('/api/wallet', walletRoutes)
app.use('/api/user', userRoutes)
app.use('/api/task', taskRoutes)
app.use('/api', exchangeRoutes)
app.use(telegramRegisterRouter)

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
app.get('/api/content', (req, res) => {
	res.json(CONTENT)
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
	console.error('‚ùå –û—à–∏–±–∫–∞:', err.stack)
	res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
const startServer = async () => {
	try {
		// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
		await sequelize.sync() // –£–±–µ—Ä–∏—Ç–µ { force: true } –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
		await sequelize.authenticate()

		// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
		const PORT = process.env.PORT || 7000
		app.listen(PORT, () => {
			console.log(`üöÄ Server is running on port ${PORT}`)
		})

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
		setupBotCommands(bot)
		console.log('ü§ñ Telegram Bot is running...')
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error)
		process.exit(1) // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –æ—à–∏–±–∫–æ–π
	}
}

startServer()
