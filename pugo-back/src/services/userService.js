const { User, Task, UserTask } = require('../models')
const generateReferralCode = require('../utils/generateReferralCode')

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
const createUser = async (telegramId, username, firstName, lastName) => {
	const user = await User.create({
		telegramId,
		username,
		firstName,
		lastName,
		tokens: 1,
		referralCode: generateReferralCode(),
		automining: false,
		autominingExpiresAt: null,
		transactions: [],
	})

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
	const tasks = await Task.findAll()

	// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ç—É—Å false)
	const userTasks = tasks.map(task => ({
		userId: user.telegramId,
		taskId: task.id,
		status: 'available',
	}))

	await UserTask.bulkCreate(userTasks)

	return user
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
const getUserByTelegramId = async telegramId => {
	console.log(`üîç –ò—â—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: telegramId=${telegramId}`)
	const user = await User.findOne({ where: { telegramId } })
	console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: ${user ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω'}`)
	return user
}

const createUserIfNeeded = async ({
	telegramId,
	username,
	firstName,
	lastName,
}) => {
	const existingUser = await getUserByTelegramId(telegramId)

	if (existingUser) {
		console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingUser)

		if (!existingUser.referralCode) {
			console.log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π...')
			const referralCode = generateReferralCode()
			existingUser.referralCode = referralCode
			await existingUser.save()
			console.log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:', referralCode)
		}

		return existingUser
	}

	console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...')
	return await createUser(telegramId, username, firstName, lastName)
}

const updateUserTokens = async (telegramId, amount) => {
	const user = await User.findOne({ where: { telegramId } })

	if (!user) {
		throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
	}

	user.tokens = parseFloat(user.tokens) + amount
	await user.save()

	return user
}
const enableMiningForUser = async (telegramId, stars, days) => {
	const user = await User.findOne({ where: { telegramId } })

	if (!user) {
		throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
	}

	const expiresAt = new Date()
	expiresAt.setDate(expiresAt.getDate() + days) // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ

	user.automining = true
	user.autominingExpiresAt = expiresAt
	await user.save()

	return user
}

const checkAndAddPugoDaily = async () => {
	const users = await User.findAll({ where: { autominig: true } })

	for (const user of users) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞
		if (user.autominigExpiresAt && new Date() < user.autominigExpiresAt) {
			// –ï—Å–ª–∏ —Å—Ä–æ–∫ –Ω–µ –∏—Å—Ç–µ–∫, –¥–æ–±–∞–≤–ª—è–µ–º PUGO
			await addPugoToBalance(user.telegramId, 100)
		} else {
			user.autominig = false
			user.autominigExpiresAt = null
			await user.save()

			console.log(
				`–ê–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegramId} –æ—Ç–∫–ª—é—á–µ–Ω, —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫.`
			)
		}
	}
}
const addTransaction = async (telegramId, stars, description, amount) => {
	const user = await User.findOne({ where: { telegramId } })

	if (!user) {
		throw new Error('User not found')
	}

	const transaction = {
		time: new Date(),
		stars: stars,
		description: description,
		amount: amount,
	}
	user.transactions = [...user.transactions, transaction]
	await user.save()

	return user
}

module.exports = {
	createUser,
	getUserByTelegramId,
	createUserIfNeeded,
	updateUserTokens,
	enableMiningForUser,
	addTransaction,
	checkAndAddPugoDaily,
}
